{"ast":null,"code":"import * as React from 'react';\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isDateObject = data => data instanceof Date;\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\nvar compact = value => value.filter(Boolean);\nvar isUndefined = val => val === undefined;\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n  return undefined;\n};\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nconst FormContext = React.createContext(null);\nFormContext.displayName = 'RHFContext';\nconst useFormContext = () => React.useContext(FormContext);\nconst FormProvider = props => React.createElement(FormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\nvar getProxyFormState = (isProxyEnabled, formState, readFormStateRef, localReadFormStateRef, isRoot = true) => isProxyEnabled ? new Proxy(formState, {\n  get: (obj, prop) => {\n    if (prop in obj) {\n      if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n        readFormStateRef.current[prop] = isRoot ? VALIDATION_MODE.all : true;\n      }\n      localReadFormStateRef && (localReadFormStateRef.current[prop] = true);\n      return obj[prop];\n    }\n    return undefined;\n  }\n}) : formState;\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nvar shouldRenderFormState = (formStateData, readFormStateRef, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(readFormStateRef).length || Object.keys(formState).find(key => readFormStateRef[key] === (isRoot ? VALIDATION_MODE.all : true));\n};\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\nfunction useFormState(props) {\n  const {\n    control,\n    name\n  } = props || {};\n  const methods = useFormContext();\n  const {\n    formStateRef,\n    subjectsRef,\n    readFormStateRef\n  } = control || methods.control;\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: formState => (!nameRef.current || !formState.name || convertToArrayPayload(nameRef.current).includes(formState.name)) && shouldRenderFormState(formState, readFormState.current) && updateFormState(Object.assign(Object.assign({}, formStateRef.current), formState))\n    });\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n  return getProxyFormState(isProxyEnabled, formState, readFormStateRef, readFormState, false);\n}\nfunction useController({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister\n}) {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef\n  } = control || methods.control;\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(field && field._f && !isUndefined(field._f.value) ? field._f.value : isUndefined(get(defaultValuesRef.current, name)) ? defaultValue : get(defaultValuesRef.current, name));\n  const {\n    onChange,\n    onBlur,\n    ref\n  } = register(name, Object.assign(Object.assign({}, rules), {\n    value\n  }));\n  const formState = useFormState({\n    control: control || methods.control,\n    name\n  });\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: data => (!data.name || name === data.name) && setInputStateValue(get(data.values, name))\n    });\n    const field = get(fieldsRef.current, name);\n    if (field && field._f) {\n      field._f._c = true;\n    }\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n      if (isNameInFieldArray(namesRef.current.array, name) ? shouldUnmountField && !inFieldArrayActionRef.current : shouldUnmountField) {\n        unregister(name);\n      } else {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          field._f.mount = false;\n        }\n      }\n    };\n  }, [name]);\n  return {\n    field: {\n      onChange: event => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n        onChange({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => elm && ref(elm)\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\nconst Controller = props => props.render(useController(props));\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar isKey = value => /^\\w*$/.test(value);\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\nconst getFieldsValues = (fieldsRef, output = {}) => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      set(output, name, _f && _f.ref ? _f.ref.disabled || _f.refs && _f.refs.every(ref => ref.disabled) ? undefined : _f.value : Array.isArray(field) ? [] : {});\n      current && getFieldsValues({\n        current\n      }, output[name]);\n    }\n  }\n  return output;\n};\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar mapIds = (values = [], keyName) => values.map(value => Object.assign({\n  [keyName]: value && value[keyName] || generateId()\n}, value));\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || isDateObject(object1) || isDateObject(object2)) {\n    return object1 === object2;\n  }\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n    for (const key of keys1) {\n      const val1 = object1[key];\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n        if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n  return target;\n}\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n  return dirtyFields;\n}\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\nfunction append(data, value) {\n  return [...data, ...convertToArrayPayload(value)];\n}\nvar fillEmptyArray = value => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...data];\n}\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nvar isBoolean = value => typeof value === 'boolean';\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nconst useFieldArray = ({\n  control,\n  name,\n  keyName = 'id',\n  shouldUnregister\n}) => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    getIsDirty,\n    namesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    subjectsRef,\n    readFormStateRef,\n    updateIsValid,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n    register\n  } = control || methods.control;\n  const [fields, setFields] = React.useState(mapIds((get(fieldsRef.current, name) && isMountedRef.current ? get(getFieldsValues(fieldsRef), name) : get(fieldArrayDefaultValuesRef.current, getNodeParentName(name)) ? get(fieldArrayDefaultValuesRef.current, name) : get(defaultValuesRef.current, name)) || [], keyName));\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  namesRef.current.array.add(name);\n  const omitKey = fields => fields.map((field = {}) => omit(field, keyName));\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n    return mapIds(get(fieldArrayDefaultValuesRef.current, name, []).map((item, index) => Object.assign(Object.assign({}, item), values[index])), keyName);\n  };\n  const getFocusFieldName = (index, options) => options && !options.shouldFocus ? options.focusName || `${name}.${options.focusIndex}.` : `${name}.${index}.`;\n  const setFieldsAndNotify = (fieldsValues = []) => setFields(mapIds(fieldsValues, keyName));\n  const cleanup = ref => !compact(get(ref, name, [])).length && unset(ref, name);\n  const batchStateUpdate = (method, args, updatedFieldArrayValues = [], shouldSet = true) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n    if (readFormStateRef.current.touchedFields && get(formStateRef.current.touchedFields, name)) {\n      const output = method(get(formStateRef.current.touchedFields, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      updatedFieldArrayValues && set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      cleanup(formStateRef.current.dirtyFields);\n    }\n    subjectsRef.current.state.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors,\n      isValid: formStateRef.current.isValid\n    });\n  };\n  const registerFieldArray = (values, index = 0, parentName = '') => values.forEach((appendValueItem, valueIndex) => {\n    const rootName = `${parentName || name}.${parentName ? valueIndex : index + valueIndex}`;\n    isPrimitive(appendValueItem) ? register(rootName, {\n      value: appendValueItem\n    }) : Object.entries(appendValueItem).forEach(([key, value]) => {\n      const inputName = rootName + '.' + key;\n      Array.isArray(value) ? registerFieldArray(value, valueIndex, inputName) : register(inputName, {\n        value\n      });\n    });\n  });\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = append(getCurrentFieldsValues(), appendValue);\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(append, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues, false);\n    registerFieldArray(appendValue, currentIndex);\n    focusNameRef.current = getFocusFieldName(currentIndex, options);\n  };\n  const prepend$1 = (value, options) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), prependValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(prepend, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(prependValue);\n    focusNameRef.current = getFocusFieldName(0, options);\n  };\n  const remove = index => {\n    const updatedFieldArrayValues = removeArrayAt(getCurrentFieldsValues(), index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(removeArrayAt, {\n      argA: index\n    }, updatedFieldArrayValues);\n  };\n  const insert$1 = (index, value, options) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insert(getCurrentFieldsValues(), index, insertValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(insertValue, index);\n    focusNameRef.current = getFocusFieldName(index, options);\n  };\n  const swap = (indexA, indexB) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, fieldValues, false);\n    setFieldsAndNotify(fieldValues);\n  };\n  const move = (from, to) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to\n    }, fieldValues, false);\n  };\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n    if (namesRef.current.watchAll) {\n      subjectsRef.current.state.next({});\n    } else {\n      for (const watchField of namesRef.current.watch) {\n        if (name.startsWith(watchField)) {\n          subjectsRef.current.state.next({});\n          break;\n        }\n      }\n    }\n    subjectsRef.current.watch.next({\n      name,\n      values: getFieldsValues(fieldsRef)\n    });\n    focusNameRef.current && focusFieldBy(fieldsRef.current, key => key.startsWith(focusNameRef.current));\n    focusNameRef.current = '';\n    subjectsRef.current.array.next({\n      name,\n      values: omitKey([...fields])\n    });\n    readFormStateRef.current.isValid && updateIsValid();\n  }, [fields, name]);\n  React.useEffect(() => {\n    const fieldArraySubscription = subjectsRef.current.array.subscribe({\n      next({\n        name: inputFieldArrayName,\n        values,\n        isReset\n      }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n          inputFieldArrayName ? set(fieldArrayDefaultValuesRef.current, inputFieldArrayName, values) : fieldArrayDefaultValuesRef.current = values;\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      }\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      if (shouldUnmount || shouldUnregister) {\n        unregister(name);\n        unset(fieldArrayDefaultValuesRef.current, name);\n      } else {\n        const fieldArrayValues = get(getFieldsValues(fieldsRef), name);\n        fieldArrayValues && set(fieldArrayDefaultValuesRef.current, name, fieldArrayValues);\n      }\n    };\n  }, []);\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend$1, [name]),\n    append: React.useCallback(append$1, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\nvar isFileInput = element => element.type === 'file';\nvar isMultipleSelect = element => element.type === `select-multiple`;\nvar isRadioInput = element => element.type === 'radio';\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = (value, {\n  valueAsNumber,\n  valueAsDate,\n  setValueAs\n}) => isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\nfunction getFieldValue(field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n    if (ref.disabled) {\n      return;\n    }\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? field._f.ref.value : ref.value, field._f);\n  }\n}\nvar getResolverOptions = (fieldsNames, fieldsRefs, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name);\n    field && set(fields, name, field._f);\n  }\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\nvar hasValidation = (options, mounted) => mounted && options && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\nvar skipValidation = ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar isFunction = value => typeof value === 'function';\nvar isString = value => typeof value === 'string';\nvar isMessage = value => isString(value) || React.isValidElement(value);\nvar isRegex = value => value instanceof RegExp;\nfunction getValidateError(result, ref, type = 'validate') {\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar validateField = async ({\n  _f: {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    value: inputValue,\n    valueAsNumber,\n    mount\n  }\n}, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef = refs ? refs[0] : ref;\n  const setCustomValidty = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidty(validateError.message);\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  setCustomValidty(true);\n  return error;\n};\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isHTMLElement = value => value instanceof HTMLElement;\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nclass Subscription {\n  constructor() {\n    this.tearDowns = [];\n  }\n  add(tearDown) {\n    this.tearDowns.push(tearDown);\n  }\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\nclass Subscriber {\n  constructor(observer, subscription) {\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(() => this.closed = true);\n  }\n  next(value) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\nclass Subject {\n  constructor() {\n    this.observers = [];\n  }\n  next(value) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n  subscribe(observer) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n    return subscription;\n  }\n  unsubscribe() {\n    this.observers = [];\n  }\n}\nconst isWindowUndefined = typeof window === 'undefined';\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {},\n  shouldFocusError = true,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode\n} = {}) {\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n  const readFormStateRef = React.useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef({});\n  const defaultValuesRef = React.useRef(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject()\n  });\n  const namesRef = React.useRef({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false\n  });\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n  const isFieldWatched = name => namesRef.current.watchAll || namesRef.current.watch.has(name) || namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n  const shouldRenderBaseOnError = React.useCallback(async (shouldSkipRender, name, error, inputState, isValidFromResolver, isWatched) => {\n    const previousError = get(formStateRef.current.errors, name);\n    const isValid = readFormStateRef.current.isValid ? resolver ? isValidFromResolver : await validateForm(fieldsRef.current, true) : false;\n    error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n    if ((isWatched || (error ? !deepEqual(previousError, error, true) : previousError) || !isEmptyObject(inputState) || formStateRef.current.isValid !== isValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign({}, inputState), {\n        isValid: !!isValid,\n        errors: formStateRef.current.errors,\n        name\n      });\n      formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), updatedFormState);\n      subjectsRef.current.state.next(isWatched ? {\n        name\n      } : updatedFormState);\n    }\n    subjectsRef.current.state.next({\n      isValidating: false\n    });\n  }, []);\n  const setFieldValue = React.useCallback((name, rawValue, options = {}, shouldRender, shouldRegister) => {\n    shouldRegister && register(name);\n    const field = get(fieldsRef.current, name);\n    if (field) {\n      const _f = field._f;\n      if (_f) {\n        const value = isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n        _f.value = getFieldValueAs(rawValue, _f);\n        if (isRadioInput(_f.ref) && !_f._c) {\n          (_f.refs || []).forEach(radioRef => radioRef.checked = radioRef.value === value);\n        } else if (isFileInput(_f.ref) && !isString(value) && !_f._c) {\n          _f.ref.files = value;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n        } else if (isCheckBoxInput(_f.ref) && _f.refs && !_f._c) {\n          _f.refs.length > 1 ? _f.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(value) ? !!value.find(data => data === checkboxRef.value) : value === checkboxRef.value) : _f.refs[0].checked = !!value;\n        } else {\n          _f.ref.value = value;\n        }\n        if (shouldRender && _f._c) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          subjectsRef.current.control.next({\n            values: Object.assign(Object.assign({}, defaultValuesRef.current), values),\n            name\n          });\n        }\n        (options.shouldDirty || options.shouldTouch) && updateTouchAndDirtyState(name, value, options.shouldTouch);\n        options.shouldValidate && trigger(name);\n      } else {\n        field._f = {\n          ref: {\n            name,\n            value: rawValue\n          },\n          value: rawValue\n        };\n      }\n    }\n  }, []);\n  const getIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n    name && data && set(formValues, name, data);\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n  const updateTouchAndDirtyState = React.useCallback((name, inputValue, isCurrentTouched, shouldRender = true) => {\n    const state = {\n      name\n    };\n    let isChanged = false;\n    if (readFormStateRef.current.isDirty) {\n      const previousIsDirty = formStateRef.current.isDirty;\n      formStateRef.current.isDirty = getIsDirty();\n      state.isDirty = formStateRef.current.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n    if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(formStateRef.current.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(get(defaultValuesRef.current, name), inputValue);\n      isCurrentFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      state.dirtyFields = formStateRef.current.dirtyFields;\n      isChanged = isChanged || isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n    }\n    const isPreviousFieldTouched = get(formStateRef.current.touchedFields, name);\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(formStateRef.current.touchedFields, name, isCurrentTouched);\n      state.touchedFields = formStateRef.current.touchedFields;\n      isChanged = isChanged || readFormStateRef.current.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n    isChanged && shouldRender && subjectsRef.current.state.next(state);\n    return isChanged ? state : {};\n  }, []);\n  const executeInlineValidation = React.useCallback(async (name, skipReRender) => {\n    const error = (await validateField(get(fieldsRef.current, name), isValidateAllFieldCriteria, shouldUseNativeValidation))[name];\n    shouldRenderBaseOnError(skipReRender, name, error);\n    return isUndefined(error);\n  }, [isValidateAllFieldCriteria]);\n  const executeResolverValidation = React.useCallback(async names => {\n    const {\n      errors\n    } = await resolverRef.current(getFieldsValues(fieldsRef), contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n      }\n    } else {\n      formStateRef.current.errors = errors;\n    }\n    return errors;\n  }, [criteriaMode, shouldUseNativeValidation]);\n  const validateForm = async (fieldsRef, shouldCheckValid, context = {\n    valid: true\n  }) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n        if (_f) {\n          const fieldError = await validateField(field, isValidateAllFieldCriteria, shouldUseNativeValidation);\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name] ? set(formStateRef.current.errors, _f.name, fieldError[_f.name]) : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n    return context.valid;\n  };\n  const trigger = React.useCallback(async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name);\n    let isValid;\n    subjectsRef.current.state.next({\n      isValidating: true\n    });\n    if (resolver) {\n      const schemaResult = await executeResolverValidation(isUndefined(name) ? name : fieldNames);\n      isValid = name ? fieldNames.every(name => !get(schemaResult, name)) : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (await Promise.all(fieldNames.filter(fieldName => get(fieldsRef.current, fieldName, {})._f).map(async fieldName => await executeInlineValidation(fieldName, true)))).every(Boolean);\n      } else {\n        await validateForm(fieldsRef.current);\n        isValid = isEmptyObject(formStateRef.current.errors);\n      }\n    }\n    subjectsRef.current.state.next(Object.assign(Object.assign({}, isString(name) ? {\n      name\n    } : {}), {\n      errors: formStateRef.current.errors,\n      isValidating: false\n    }));\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), name ? fieldNames : namesRef.current.mount);\n    }\n    readFormStateRef.current.isValid && updateIsValid();\n    return isValid;\n  }, [executeResolverValidation, executeInlineValidation]);\n  const updateIsValidAndInputValue = (name, ref) => {\n    const field = get(fieldsRef.current, name);\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined ? isUndefined(get(fieldArrayDefaultValuesRef.current, name)) ? get(defaultValuesRef.current, name) : get(fieldArrayDefaultValuesRef.current, name) : field._f.value;\n      if (!isUndefined(defaultValue)) {\n        if (ref && ref.defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n  const updateIsValid = React.useCallback(async (values = {}) => {\n    const isValid = resolver ? isEmptyObject((await resolverRef.current(Object.assign(Object.assign({}, getFieldsValues(fieldsRef)), values), contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation))).errors) : await validateForm(fieldsRef.current, true);\n    isValid !== formStateRef.current.isValid && subjectsRef.current.state.next({\n      isValid\n    });\n  }, [criteriaMode, shouldUseNativeValidation]);\n  const setInternalValues = React.useCallback((name, value, options) => Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n    const fieldName = `${name}.${fieldKey}`;\n    const field = get(fieldsRef.current, fieldName);\n    const isFieldArray = namesRef.current.array.has(name);\n    (isFieldArray || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setInternalValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options, true, !field);\n  }), [trigger]);\n  const setValue = (name, value, options = {}) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true\n      });\n      if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && options.shouldDirty) {\n        set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value)\n        });\n      }\n      !value.length && set(fieldsRef.current, name, []) && set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n    (field && !field._f || isFieldArray) && !isNullOrUndefined(value) ? setInternalValues(name, value, isFieldArray ? {} : options) : setFieldValue(name, value, options, true, !field);\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({\n      name,\n      values: getValues()\n    });\n  };\n  const handleChange = React.useCallback(async ({\n    type,\n    target,\n    target: {\n      value,\n      type: inputType\n    }\n  }) => {\n    let name = target.name;\n    let error;\n    let isValid;\n    const field = get(fieldsRef.current, name);\n    if (field) {\n      let inputValue = inputType ? getFieldValue(field) : undefined;\n      inputValue = isUndefined(inputValue) ? value : inputValue;\n      const isBlurEvent = type === EVENTS.BLUR;\n      const {\n        isOnBlur: isReValidateOnBlur,\n        isOnChange: isReValidateOnChange\n      } = getValidationModes(reValidateMode);\n      const shouldSkipValidation = !hasValidation(field._f, field._f.mount) && !resolver && !get(formStateRef.current.errors, name) || skipValidation(Object.assign({\n        isBlurEvent,\n        isTouched: !!get(formStateRef.current.touchedFields, name),\n        isSubmitted: formStateRef.current.isSubmitted,\n        isReValidateOnBlur,\n        isReValidateOnChange\n      }, validationMode));\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n      if (!isUndefined(inputValue)) {\n        field._f.value = inputValue;\n      }\n      const inputState = updateTouchAndDirtyState(name, field._f.value, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(inputState) || isWatched;\n      if (shouldSkipValidation) {\n        !isBlurEvent && subjectsRef.current.watch.next({\n          name,\n          type,\n          values: getValues()\n        });\n        return shouldRender && subjectsRef.current.state.next(isWatched ? {\n          name\n        } : Object.assign(Object.assign({}, inputState), {\n          name\n        }));\n      }\n      subjectsRef.current.state.next({\n        isValidating: true\n      });\n      if (resolver) {\n        const {\n          errors\n        } = await resolverRef.current(getFieldsValues(fieldsRef), contextRef.current, getResolverOptions([name], fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n        error = get(errors, name);\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const currentError = get(errors, parentNodeName, {});\n          currentError.type && currentError.message && (error = currentError);\n          if (currentError || get(formStateRef.current.errors, parentNodeName)) {\n            name = parentNodeName;\n          }\n        }\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, isValidateAllFieldCriteria, shouldUseNativeValidation))[name];\n      }\n      !isBlurEvent && subjectsRef.current.watch.next({\n        name,\n        type,\n        values: getValues()\n      });\n      shouldRenderBaseOnError(false, name, error, inputState, isValid, isWatched);\n    }\n  }, []);\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, defaultValuesRef.current), getFieldsValues(fieldsRef));\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(formStateRef.current.errors, inputName)) : formStateRef.current.errors = {};\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors\n    });\n  };\n  const setError = (name, error, options) => {\n    const ref = ((get(fieldsRef.current, name) || {\n      _f: {}\n    })._f || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  const watchInternal = React.useCallback((fieldNames, defaultValue, isGlobal, formValues) => {\n    const isArrayNames = Array.isArray(fieldNames);\n    const fieldValues = formValues || isMountedRef.current ? Object.assign(Object.assign({}, defaultValuesRef.current), formValues || getFieldsValues(fieldsRef)) : isUndefined(defaultValue) ? defaultValuesRef.current : isArrayNames ? defaultValue : {\n      [fieldNames]: defaultValue\n    };\n    if (isUndefined(fieldNames)) {\n      isGlobal && (namesRef.current.watchAll = true);\n      return fieldValues;\n    }\n    const result = [];\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && namesRef.current.watch.add(fieldName);\n      result.push(get(fieldValues, fieldName));\n    }\n    return isArrayNames ? result : result[0];\n  }, []);\n  const watch = (fieldName, defaultValue) => isFunction(fieldName) ? subjectsRef.current.watch.subscribe({\n    next: info => fieldName(watchInternal(undefined, defaultValue), info)\n  }) : watchInternal(fieldName, defaultValue, true);\n  const unregister = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n      if (get(fieldsRef.current, inputName)) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty && unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched && unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister && !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n      }\n    }\n    subjectsRef.current.watch.next({\n      values: getValues()\n    });\n    subjectsRef.current.state.next(Object.assign(Object.assign({}, formStateRef.current), !options.keepDirty ? {} : {\n      isDirty: getIsDirty()\n    }));\n    !options.keepIsValid && updateIsValid();\n  };\n  const registerFieldRef = (name, ref, options) => {\n    register(name, options);\n    let field = get(fieldsRef.current, name);\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    if (ref === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === ref)) {\n      return;\n    }\n    field = {\n      _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n        refs: [...compact(field._f.refs || []).filter(ref => isHTMLElement(ref) && document.contains(ref)), ref],\n        ref: {\n          type: ref.type,\n          name\n        }\n      }) : Object.assign(Object.assign({}, field._f), {\n        ref\n      })\n    };\n    set(fieldsRef.current, name, field);\n    updateIsValidAndInputValue(name, ref);\n  };\n  const register = React.useCallback((name, options = {}) => {\n    const field = get(fieldsRef.current, name);\n    set(fieldsRef.current, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    namesRef.current.mount.add(name);\n    !field && updateIsValidAndInputValue(name);\n    return isWindowUndefined ? {\n      name: name\n    } : {\n      name,\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          registerFieldRef(name, ref, options);\n        } else {\n          const field = get(fieldsRef.current, name, {});\n          const shouldUnmount = shouldUnregister || options.shouldUnregister;\n          if (field._f) {\n            field._f.mount = false;\n            // If initial state of field element is disabled,\n            // value is not set on first \"register\"\n            // re-sync the value in when it switched to enabled\n            if (isUndefined(field._f.value)) {\n              field._f.value = field._f.ref.value;\n            }\n          }\n          shouldUnmount && !(isNameInFieldArray(namesRef.current.array, name) && inFieldArrayActionRef.current) && namesRef.current.unMount.add(name);\n        }\n      }\n    };\n  }, []);\n  const handleSubmit = React.useCallback((onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n    let hasNoPromiseError = true;\n    let fieldValues = getFieldsValues(fieldsRef);\n    subjectsRef.current.state.next({\n      isSubmitting: true\n    });\n    try {\n      if (resolver) {\n        const {\n          errors,\n          values\n        } = await resolverRef.current(fieldValues, contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n        formStateRef.current.errors = errors;\n        fieldValues = values;\n      } else {\n        await validateForm(fieldsRef.current);\n      }\n      if (isEmptyObject(formStateRef.current.errors) && Object.keys(formStateRef.current.errors).every(name => get(fieldValues, name))) {\n        subjectsRef.current.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(formStateRef.current.errors, e));\n        shouldFocusError && focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), namesRef.current.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      formStateRef.current.isSubmitted = true;\n      subjectsRef.current.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n        submitCount: formStateRef.current.submitCount + 1,\n        errors: formStateRef.current.errors\n      });\n    }\n  }, [shouldFocusError, isValidateAllFieldCriteria, criteriaMode, shouldUseNativeValidation]);\n  const registerAbsentFields = (defaultValues, name = '') => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName, {\n            value\n          });\n        }\n      }\n    }\n  };\n  const reset = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form').reset();\n            break;\n          } catch (_a) {}\n        }\n      }\n    }\n    !keepStateOptions.keepDefaultValues && (defaultValuesRef.current = Object.assign({}, updatedValues));\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues ? defaultValuesRef.current : Object.assign({}, updatedValues)\n      });\n      subjectsRef.current.watch.next({\n        values: Object.assign({}, updatedValues)\n      });\n      subjectsRef.current.array.next({\n        values: Object.assign({}, updatedValues),\n        isReset: true\n      });\n    }\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false\n    };\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? formStateRef.current.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? formStateRef.current.isDirty : keepStateOptions.keepDefaultValues ? deepEqual(values, defaultValuesRef.current) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? formStateRef.current.dirtyFields : {},\n      touchedFields: keepStateOptions.keepTouched ? formStateRef.current.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n  const setFocus = name => get(fieldsRef.current, name)._f.ref.focus();\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), formState);\n          updateFormState(formStateRef.current);\n        }\n      }\n    });\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      }\n    });\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n  React.useEffect(() => {\n    const unregisterFieldNames = [];\n    const isLiveInDom = ref => !isHTMLElement(ref) || !document.contains(ref);\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name);\n      field && (field._f.refs ? field._f.refs.every(isLiveInDom) : isLiveInDom(field._f.ref)) && unregisterFieldNames.push(name);\n    }\n    unregisterFieldNames.length && unregister(unregisterFieldNames);\n    namesRef.current.unMount = new Set();\n  });\n  return {\n    control: React.useMemo(() => ({\n      register,\n      inFieldArrayActionRef,\n      getIsDirty,\n      subjectsRef,\n      watchInternal,\n      fieldsRef,\n      updateIsValid,\n      namesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      fieldArrayDefaultValuesRef,\n      unregister,\n      shouldUnmount: shouldUnregister\n    }), []),\n    formState: getProxyFormState(isProxyEnabled, formState, readFormStateRef),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, [])\n  };\n}\nfunction useWatch(props) {\n  const {\n    control,\n    name,\n    defaultValue\n  } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n  const {\n    watchInternal,\n    subjectsRef\n  } = control || methods.control;\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? watchInternal(name) : defaultValue);\n  React.useEffect(() => {\n    watchInternal(name);\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: ({\n        name: inputName,\n        values\n      }) => (!nameRef.current || !inputName || convertToArrayPayload(nameRef.current).some(fieldName => inputName && fieldName && (fieldName.startsWith(inputName) || inputName.startsWith(fieldName)))) && updateValue(watchInternal(nameRef.current, defaultValue, false, values))\n    });\n    return () => watchSubscription.unsubscribe();\n  }, []);\n  return value;\n}\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFieldsValues.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/useFieldArray.ts","../src/utils/isFileInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isFunction.ts","../src/utils/isString.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/Subject.ts","../src/useForm.ts","../src/useWatch.ts"],"names":["getFieldArrayParentName","append","appendAt","prepend","prependAt","insert","insertAt","isCheckBox"],"mappings":"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","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, subjectsRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    field && field._f && !isUndefined(field._f.value)\n      ? field._f.value\n      : isUndefined(get(defaultValuesRef.current, name))\n      ? defaultValue\n      : get(defaultValuesRef.current, name),\n  );\n  const { onChange, onBlur, ref } = register(name, {\n    ...rules,\n    value,\n  });\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    const field = get(fieldsRef.current, name);\n\n    if (field && field._f) {\n      field._f._c = true;\n    }\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isNameInFieldArray(namesRef.current.array, name)\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else {\n        const field = get(fieldsRef.current, name);\n\n        if (field && field._f) {\n          field._f.mount = false;\n        }\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...data];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  Path,\n  PathValue,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n  UseFormRegister,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n  shouldUnregister,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    getIsDirty,\n    namesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    subjectsRef,\n    readFormStateRef,\n    updateIsValid,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n    register,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      (get(fieldsRef.current, name) && isMountedRef.current\n        ? get(getFieldsValues(fieldsRef), name)\n        : get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name)\n        : get(defaultValuesRef.current, name)) || [],\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  namesRef.current.array.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    fields: T,\n  ) =>\n    fields.map((field = {}) => omit(field as Record<TKeyName, any>, keyName));\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusFieldName = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options && !options.shouldFocus\n      ? options.focusName || `${name}.${options.focusIndex}.`\n      : `${name}.${index}.`;\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues),\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    subjectsRef.current.state.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach((appendValueItem, valueIndex) => {\n      const rootName = `${parentName || name}.${\n        parentName ? valueIndex : index + valueIndex\n      }`;\n      isPrimitive(appendValueItem)\n        ? (register as UseFormRegister<TFieldValues>)(\n            rootName as Path<TFieldValues>,\n            {\n              value: appendValueItem as PathValue<\n                TFieldValues,\n                Path<TFieldValues>\n              >,\n            },\n          )\n        : Object.entries(appendValueItem).forEach(([key, value]) => {\n            const inputName = rootName + '.' + key;\n\n            Array.isArray(value)\n              ? registerFieldArray(value, valueIndex, inputName)\n              : (register as UseFormRegister<TFieldValues>)(\n                  inputName as Path<TFieldValues>,\n                  { value },\n                );\n          });\n    });\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusFieldName(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusFieldName(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n\n    setFieldsAndNotify(updatedFieldArrayValues);\n\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusFieldName(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (namesRef.current.watchAll) {\n      subjectsRef.current.state.next({});\n    } else {\n      for (const watchField of namesRef.current.watch) {\n        if (name.startsWith(watchField)) {\n          subjectsRef.current.state.next({});\n          break;\n        }\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      name,\n      values: getFieldsValues(fieldsRef),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(fieldsRef.current, (key: string) =>\n        key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    subjectsRef.current.array.next({\n      name,\n      values: omitKey([...fields]),\n    });\n\n    readFormStateRef.current.isValid && updateIsValid();\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = subjectsRef.current.array.subscribe({\n      next({ name: inputFieldArrayName, values, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                values,\n              )\n            : (fieldArrayDefaultValuesRef.current = values);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      if (shouldUnmount || shouldUnregister) {\n        unregister(name as FieldPath<TFieldValues>);\n        unset(fieldArrayDefaultValuesRef.current, name);\n      } else {\n        const fieldArrayValues = get(getFieldsValues(fieldsRef), name);\n        fieldArrayValues &&\n          set(fieldArrayDefaultValuesRef.current, name, fieldArrayValues);\n      }\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isDateObject from './utils/isDateObject';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      inputState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      error\n        ? set(formStateRef.current.errors, name, error)\n        : unset(formStateRef.current.errors, name);\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(inputState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...inputState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref) && !_f._c) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value) && !_f._c) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs && !_f._c) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender && _f._c) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n            shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName, {})._f)\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          name ? fieldNames : namesRef.current.mount,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (name: InternalFieldName, ref?: Ref) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? isUndefined(get(fieldArrayDefaultValuesRef.current, name))\n          ? get(defaultValuesRef.current, name)\n          : get(fieldArrayDefaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                  shouldUseNativeValidation,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      isValid !== formStateRef.current.isValid &&\n        subjectsRef.current.state.next({\n          isValid,\n        });\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n        const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        (isFieldArray || !isPrimitive(fieldValue) || (field && !field._f)) &&\n        !isDateObject(fieldValue)\n          ? setInternalValues(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const inputState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...inputState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        if (resolver) {\n          const { errors } = await resolverRef.current!(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            getResolverOptions(\n              [name],\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n        } else {\n          error = (\n            await validateField(\n              field,\n              isValidateAllFieldCriteria,\n              shouldUseNativeValidation,\n            )\n          )[name];\n        }\n\n        !isBlurEvent &&\n          subjectsRef.current.watch.next({\n            name,\n            type,\n            values: getValues(),\n          });\n        shouldRenderBaseOnError(\n          false,\n          name,\n          error,\n          inputState,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      values: getValues(),\n    });\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [\n      shouldFocusError,\n      isValidateAllFieldCriteria,\n      criteriaMode,\n      shouldUseNativeValidation,\n    ],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? defaultValuesRef.current\n          : { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const unregisterFieldNames = [];\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregisterFieldNames.push(name);\n    }\n\n    unregisterFieldNames.length &&\n      unregister(unregisterFieldNames as FieldPath<TFieldValues>[]);\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, subjectsRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: ({ name: inputName, values }) =>\n        (!nameRef.current ||\n          !inputName ||\n          convertToArrayPayload(nameRef.current).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          watchInternal(\n            nameRef.current as string,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            false,\n            values,\n          ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}